{
  "Header": {
    "_": [
      " This file for vsSolutionBuildEvent ",
      " https://github.com/3F/vsSolutionBuildEvent "
    ],
    "Compatibility": "0.12.4"
  },
  "PreBuild": [
    {
      "Enabled": true,
      "Name": "Definitions",
      "Caption": "Prepares data",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[$(revDeltaBase  = \"2016/11/05\")]",
          "#[$(revDeltaMin   = $([System.Math]::Pow(10, 3)))]",
          "#[$(revDeltaMax   = 65534)] #[\" limit of AssemblyVersion (2^16 - 2) - i.e. 65534 max allowed \"]",
          "",
          "#[\"",
          "    Prepares data - version, revBuild & information from git",
          "\"]",
          "",
          "#[var tBase     = $([System.DateTime]::Parse('$(revDeltaBase)').ToBinary())]",
          "#[var tNow      = $([System.DateTime]::UtcNow.Ticks)]",
          "#[var revBuild  = #[$(",
          "    [System.TimeSpan]::FromTicks('$(",
          "        [MSBuild]::Subtract($(tNow), $(tBase))",
          "    )')",
          "    .TotalMinutes.ToString('0')",
          ")]]",
          "                     ",
          "#[var revBuild  = #[$(",
          "",
          " [MSBuild]::Add(",
          "     $(revDeltaMin), ",
          "     $([MSBuild]::Modulo(",
          "         $(revBuild), ",
          "         $([MSBuild]::Subtract(",
          "             $(revDeltaMax), $(revDeltaMin)",
          "          ))",
          "      ))",
          "  )",
          "  ",
          ")]]",
          "",
          "$(incModules = 'inc/modules/')",
          "",
          "#[var pDir          = vsSolutionBuildEvent/]",
          "#[var pDirBridge    = Bridge/]",
          "#[var pDirCIM       = CI.MSBuild/]",
          "#[var pDirCIGUI     = CI.GUI/]",
          "#[var pDirDevenv    = Devenv\\]",
          "#[var pDirProvider  = Provider/]",
          "#[var pMvsSln       = MvsSln/]",
          "",
          "#[var numSBE        = #[File get(\".version\")]]",
          "#[var numBridge     = #[File get(\"#[var pDirBridge].version\")]]",
          "#[var numCIM        = #[var numSBE]]",
          "#[var numDevenv     = #[File get(\"#[var pDirDevenv].version\")]]",
          "#[var numProvider   = #[File get(\"#[var pDirProvider].version\")]]",
          "",
          "#[\" the 0 number is reserved for patches from external assemblies /see AssemblyInfo \"]",
          "",
          "#[var num0Bridge     = #[var numBridge].0]",
          "#[var num0Devenv     = #[var numDevenv].0]",
          "#[var num0Provider   = #[var numProvider].0]",
          "",
          "#[var libCore       = #[var numSBE]]",
          "#[var libCoreInt    = $([System.Convert]::ToInt32(\"$(libCore.Replace('.', '0'))\"))]#[\" v0.12.5 -> 1205 \"]",
          "",
          "#[var vssbeConf = $(Configuration:vsSolutionBuildEvent)]",
          "#[var cfgSDK    = $(vssbeConf.Trim('RELDBGCI_SK'))]",
          "",
          "",
          "#[var tplVersion = // This code was generated by a vsSolutionBuildEvent. ",
          "// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.",
          "namespace net.r_eg.vsSBE%namespace%",
          "{",
          "    internal struct Version",
          "    {",
          "        public static readonly System.Version number = new System.Version(S_NUM_REV);",
          "",
          "        public const string S_NUM = \"%VersionString%\";",
          "        public const string S_REV = \"%VersionRev%\";",
          "",
          "        public const string S_NUM_REV = S_NUM + \".\" + S_REV;",
          "",
          "        public const string B_SHA1 = \"%bSha1%\";",
          "        public const string B_NAME = \"%bName%\";",
          "        public const string B_REVC = \"%bRevCount%\";",
          "",
          "        internal const string S_INFO      = S_NUM_REV + \"+\" + B_SHA1;",
          "        internal const string S_INFO_FULL = S_INFO;",
          "    }",
          "}]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ModulesAndPkg",
      "Caption": "Submodules and dep packages",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[$(_tprjs = 'MvsSln;E-MSBuild;LSender;SobaScript;SobaScript.Mapper;SobaScript.Z.Core;SobaScript.Z.Ext;SobaScript.Z.VS;Varhead')]",
          "",
          "#[$(loop = true)]",
          "#[Box iterate(i = 0; $(loop); i += 1): #[try",
          "{",
          "    #[$(_p = \"$(_tprjs.Split(';')[$(i)].Trim())\")]",
          "    #[try ",
          "    {",
          "        #[( $(_p) != \"\" ) ",
          "        {",
          "            #[( !(#[IO exists.file(\"$(_p)/$(_p).sln\")]) ) { #[File call(\"git\", \"submodule update --init $(_p)\", 1000)] }]",
          "        }]",
          "    }",
          "    catch(err, msg){ #[IO writeLine(STDERR): Cfg .props.user failed: #[$(msg)] ] }]",
          "}",
          "catch { $(loop = false) }] ]",
          "",
          "",
          "",
          "L-660 Your project does not reference \"...\" framework. Add a reference to ...",
          "#[File scall(\"tools\\hmsbuild.bat\", \"-t:restore /v:q /nologo /p:Configuration=$(Configuration) /p:Platform=\\\"Any CPU\\\"\", 1000)]",
          "",
          "",
          "",
          "#[\" Packages \"]",
          "",
          "#[( !(#[IO exists.file(\"packages/__checked\")]) )",
          "{",
          "    #[IO writeLine(STDOUT): Restoring packages. Please wait ...]    ",
          "",
          "    #[NuGet gnt.raw(\"/p:ngconfig=\\\"tools/packages.config\\\" /nologo /v:m /m:6\")]",
          "    ",
          "    ",
          "    #[IO copy.directory(\"\", \"packages/\", true)]",
          "    #[File write(\"packages/__checked\"): ]",
          "}]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "Version",
      "Caption": "Updating version for vsSBE",
      "IgnoreIfBuildFailed": true,
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[\" ",
          "    Checking of the git to define sha1, branch name, etc.",
          "\"]",
          "#[var isGit = #[IO cmd(\"git rev-parse 2>&1\")]]",
          "#[( $(isGit) == \"\" )",
          "{",
          "    #[var bSha1        = #[File sout(\"git\", \"rev-parse --short HEAD\")]]",
          "    #[var bName        = #[File sout(\"git\", \"rev-parse --abbrev-ref HEAD\")]]",
          "    #[var bRevCount    = #[File sout(\"git\", \"rev-list HEAD --count\")]]",
          "    ",
          "    #[var csVersion = $(tplVersion.Replace(%bName%, \"$(bName)\").Replace(%bSha1%, \"$(bSha1)\").Replace(%bRevCount%, \"$(bRevCount)\"))]",
          "    ",
          "    #[($(bName) == \"HEAD\") {",
          "        #[var bName = $(APPVEYOR_REPO_BRANCH)]",
          "    }]",
          "}",
          "else {",
          "    #[var bSha1 =-] #[var bName =-] #[var bRevCount =-]",
          "    #[var csVersion = $(tplVersion.Replace(%bName%, \"-\").Replace(%bSha1%, \"-\").Replace(%bRevCount%, \"-\"))]",
          "}]",
          "",
          "",
          "#[\"",
          "    'vsSolutionBuildEvent' project",
          "\"]",
          "",
          "#[var cs = $(csVersion.Replace(\"%Version%\", \"$(numSBE.Replace('.', ', ')), $(revBuild)\").Replace(\"%namespace%\", \"\"))]",
          "#[var cs = $(cs.Replace(\"%VersionRev%\", \"$(revBuild)\").Replace(\"%VersionString%\", \"$(numSBE)\"))]",
          "#[File write(\"#[var pDir]Version.cs\"):#[var cs]]",
          "#[File write(\"#[var pDirCIM]Version.cs\"):#[var cs]]",
          "",
          "",
          "#[\"",
          "    .vsixmanifest",
          "\"]",
          "",
          "#[var vsixvnum = #[var numSBE]]",
          "",
          "#[( $(IsRCI) ) {",
          "    #[var numSBE = #[var numSBE].#[var revBuild]]",
          "    $(fRCI = 'RCI/')",
          "}",
          "else{ $(fRCI = '') }]",
          "",
          "#[File replace.Regexp(\"#[var pDir]/sdk10.vsixmanifest\", \"<Version>[0-9.]+</Version>\", \"<Version>#[var vsixvnum]</Version>\")]",
          "",
          "#[File replace.Regexp(\"#[var pDir]/sdk15.vsixmanifest\", \"(<Identity.*?) Version=\\\"[0-9.]+\\\"\", \"$1 Version=\\\"#[var vsixvnum]\\\"\")]",
          "",
          "#[File replace.Regexp(\"#[var pDir]/sdk17.vsixmanifest\", \"(<Identity.*?) Version=\\\"[0-9.]+\\\"\", \"$1 Version=\\\"#[var vsixvnum]\\\"\")]",
          ""
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "IncProps",
      "Caption": "`.props.user` properties for inc modules",
      "IgnoreIfBuildFailed": true,
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "",
          "#[\" TODO: migrate to .props \"]",
          "",
          "#[var tplProps =",
          "<Project>",
          "  <PropertyGroup>",
          "    <Version>$v</Version>",
          "  </PropertyGroup>",
          "</Project>",
          "]",
          "",
          "#[$(_tprjs = 'E-MSBuild;LSender;SobaScript;SobaScript.Mapper;SobaScript.Z.Core;SobaScript.Z.Ext;SobaScript.Z.VS;Varhead')]",
          "",
          "#[$(loop = true)]",
          "#[Box iterate(i = 0; $(loop); i += 1): #[try",
          "{",
          "    #[$(_p = \"$(_tprjs.Split(';')[$(i)].Trim())\")]",
          "    #[try ",
          "    {",
          "        #[( $(_p) != \"\" ) ",
          "        {",
          "            #[File write(\"$(incModules)/$(_p)/.props.user\"): #[$(tplProps.Replace('$v', '#[File get(\"$(_p)/.version\")]'))]]",
          "        }]",
          "    }",
          "    catch(err, msg){ #[IO writeLine(STDERR): Cfg .props.user failed: #[$(msg)] ] }]",
          "}",
          "catch { $(loop = false) }] ]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "Fvsixmanifest",
      "Caption": "source.extension.vsixmanifest",
      "IgnoreIfBuildFailed": true,
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[IO copy.file(\"$(pDir)/sdk$(cfgSDK).vsixmanifest\", \"$(pDir)/source.extension.vsixmanifest\", true)]",
          ""
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "VerProjects",
      "Caption": "Updating version for all subprojects",
      "IgnoreIfBuildFailed": true,
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[\"",
          "    for 'Bridge'",
          "\"]",
          "",
          "#[var cs    = $(csVersion.Replace(\"%Version%\", \"$(num0Bridge.Replace('.', ', ')), $(revBuild)\").Replace(\"%namespace%\", \".Bridge\"))]",
          "#[var cs    = $(cs.Replace(\"%VersionRev%\", \"$(revBuild)\").Replace(\"%VersionString%\", \"$(num0Bridge)\"))]",
          "#[File write(\"#[var pDirBridge]Version.cs\"):#[var cs]]",
          "",
          "#[\"",
          "    for 'Devenv'",
          "\"]",
          "",
          "#[var cs    = $(csVersion.Replace(\"%Version%\", \"$(num0Devenv.Replace('.', ', ')), $(revBuild)\").Replace(\"%namespace%\", \".Devenv\"))]",
          "#[var cs    = $(cs.Replace(\"%VersionRev%\", \"$(revBuild)\").Replace(\"%VersionString%\", \"$(num0Devenv)\"))]",
          "#[File write(\"#[var pDirDevenv]Version.cs\"):#[var cs]]",
          "",
          "#[\"",
          "    for 'Provider'",
          "\"]",
          "",
          "#[var cs    = $(csVersion.Replace(\"%Version%\", \"$(num0Provider.Replace('.', ', ')), $(revBuild)\").Replace(\"%namespace%\", \".Provider\"))]",
          "#[var cs    = $(cs.Replace(\"%VersionRev%\", \"$(revBuild)\").Replace(\"%VersionString%\", \"$(num0Provider)\"))]",
          "#[File write(\"#[var pDirProvider]Version.cs\"):#[var cs]]"
        ]
      }
    }
  ],
  "PostBuild": [
    {
      "Enabled": true,
      "Name": "Definitions",
      "Caption": "Definitions for POST",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[var odir      = $(SolutionDir)bin/Releases/$(Configuration)/]",
          "#[var cfg       = #[( $(Configuration) ^= \"REL_\" || $(Configuration) ^= \"RCI_\" ){Release}else{Debug}]]",
          "#[var cfgFull   = $(Configuration)]",
          "#[var CIMLib    = $(SolutionDir)bin\\prj\\CIMLib\\Release\\]",
          "#[var vsixLib   = $(SolutionDir)bin\\prj\\vsSolutionBuildEvent\\$(Configuration)\\]",
          "",
          "#[var netVerString  = $(TargetFrameworkVersion:vsSolutionBuildEvent)]",
          "#[var msbuildver    = v$(MSBuildToolsVersion)]",
          "",
          "#[var tplNuspec = #[File get(\"tools/vsSolutionBuildEvent.nuspec\")]]",
          "",
          "#[IO delete.directory(\"$(odir)\", true)]",
          "#[IO copy.directory(\"\", \"$(odir)\", true)]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ReleaseNotes",
      "Caption": "Release notes",
      "IgnoreIfBuildFailed": true,
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[var buildInfo = vsSolutionBuildEvent #[var numSBE]+#[var bSha1]",
          "",
          "",
          "Configuration:  #[var fRCI]#[var cfgFull] ( #[var cfg] )",
          "SDK base:       #[var cfgSDK]",
          "",
          "Sha1:           #[var bSha1]",
          "",
          "Build:          #[var revBuild]",
          "",
          "",
          "//////////////////////",
          "",
          "* Bridge:         #[var numBridge]",
          "",
          "* Provider:       #[var numProvider]",
          "",
          "#[( $(cfgSDK) == 10 ) { ",
          "* Devenv plugin:  #[var numDevenv]",
          "}",
          "else {",
          "* Devenv plugin:  Unavailable for SDK#[$(cfgSDK)]",
          "}]",
          "",
          "",
          ":: generated by a vsSolutionBuildEvent #[$(vsSolutionBuildEvent)]]",
          "",
          "#[File writeLine(\"$(odir)\\build.SDK$(cfgSDK).txt\"):#[var buildInfo]]",
          "",
          "#[var tplNuspec = $(tplNuspec.Replace(\"{build_info}\", \"$(buildInfo)\"))]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "PackAPI",
      "IgnoreIfBuildFailed": true,
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "",
          "#[$(pBinProvider = \"bin\\prj\\Provider\\$(Configuration)/\")]",
          "",
          "#[IO copy.file(\"$(odir)\\build.SDK$(cfgSDK).txt\", \"$(pBinProvider)\", true)]",
          "",
          "#[7z pack.files(",
          "{",
          "            \"$(pBinProvider)Bridge.dll\", ",
          "            \"$(pBinProvider)Bridge.pdb\",",
          "            ",
          "        #[( $(cfg) == \"Release\" ) { ",
          "            \"$(pBinProvider)Bridge.xml\",",
          "            \"$(pBinProvider)Provider.xml\",",
          "        }]",
          "            ",
          "            \"$(pBinProvider)Provider.dll\",",
          "            \"$(pBinProvider)Provider.pdb\",",
          "            \"$(pBinProvider)build.SDK$(cfgSDK).txt\" ",
          "            ",
          "}, ",
          "\"$(odir)vsSBE.API.$(numBridge)+$(bSha1).SDK$(cfgSDK).zip\")]"
        ]
      }
    },
    {
      "Enabled": false,
      "Name": "PackCIMSBuild",
      "Caption": "Pack 'CI.MSBuild'",
      "IgnoreIfBuildFailed": true,
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[IO copy.file(\"$(odir)\\build.SDK$(cfgSDK).txt\", \"$(pDirCIM)bin\\$(cfg)\\\\\", true)]",
          "#[7z pack.files(",
          "{",
          "            \"$(pDirCIM)bin\\$(cfg)\\Bridge.dll\", ",
          "            \"$(pDirCIM)bin\\$(cfg)\\Bridge.pdb\",",
          "            \"$(pDirCIM)bin\\$(cfg)\\Provider.dll\",",
          "            \"$(pDirCIM)bin\\$(cfg)\\Provider.pdb\",",
          "            ",
          "        #[( $(cfg) == \"Release\" ) { ",
          "            \"$(pDirCIM)bin\\$(cfg)\\Bridge.xml\",",
          "            \"$(pDirCIM)bin\\$(cfg)\\Provider.xml\",",
          "            \"$(pDirCIM)bin\\$(cfg)\\CI.MSBuild.xml\",",
          "        }]",
          "            ",
          "            \"$(pDirCIM)bin\\$(cfg)\\CI.MSBuild.dll\",",
          "            \"$(pDirCIM)bin\\$(cfg)\\CI.MSBuild.pdb\",",
          "            \"$(pDirCIM)bin\\$(cfg)\\build.SDK$(cfgSDK).txt\"",
          "},",
          "\"$(odir)CI.MSBuild.$(numCIM)+$(bSha1).SDK$(cfgSDK).zip\")]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "PackDevenv",
      "Caption": "Pack 'Devenv'",
      "IgnoreIfBuildFailed": true,
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[( $(cfgSDK) == 10 )",
          "{",
          "    #[var _DP = $(SolutionDir)bin\\prj\\Devenv\\$(Configuration)\\]",
          "    ",
          "    #[IO delete.directory(\"$(_DP)Devenv\", true)]",
          "    #[IO copy.directory(\"\", \"$(_DP)Devenv\", true)]",
          "    ",
          "    #[IO copy.file({",
          "                    \"$(_DP)Bridge.*\",",
          "                    \"$(_DP)Provider.*\",",
          "                    \"$(_DP)Devenv.*\"",
          "                   },",
          "                   \"$(_DP)Devenv\\\\\", true, {\"Devenv.AddIn\"})]",
          "    ",
          "    #[( #[IO exists.file(\"$(_DP)Extensibility.dll\")] ) {",
          "        #[IO copy.file(\"$(_DP)Extensibility.dll\", \"$(_DP)\\Devenv\\\\\", true)]",
          "    }]",
          "    ",
          "    #[IO copy.file(\"$(odir)\\build.SDK$(cfgSDK).txt\", \"$(_DP)Devenv\\\\\", true)]",
          "    #[7z pack.files({\"$(_DP)Devenv.AddIn\", \"$(_DP)Devenv\\*.*\"}, \"$(odir)Devenv.$(numDevenv)+$(bSha1).SDK$(cfgSDK).zip\")]",
          "    ",
          "}]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "PackVSSBE",
      "Caption": "Pack 'vsSBE'",
      "IgnoreIfBuildFailed": true,
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[IO copy.file(",
          "            \"$(vsixLib)vsSolutionBuildEvent.vsix\", ",
          "            \"$(odir)vsSolutionBuildEvent.$(vsixvnum)+$(bSha1).SDK$(cfgSDK).vsix\", ",
          "            true)]"
        ]
      }
    },
    {
      "Enabled": false,
      "Name": "VerCIMPrompt",
      "Caption": "Gets next number for package from official nuget server",
      "IgnoreIfBuildFailed": true,
      "Confirmation": true,
      "ToConfiguration": [
        "REL_SDK10|Any CPU",
        "REL_SDK15|Any CPU"
      ],
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[($(Configuration) ^= \"REL_\" && !$(Configuration) ^= \"CI_\") {",
          "    #[var numCIMPackage = $([MSBuild]::Add(#[File sout(\"cmd\", \"/C .nuget\\nuget.exe list vsSBE.CI.MSBuild | grep 'vsSBE.CI.MSBuild' | sed -r 's/^.*\\s[0-9]+\\.[0-9]+\\.//'\")], 1))]",
          "}",
          "else{",
          "    #[var numCIMPackage = 0]",
          "}]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "NuGetCIM",
      "Caption": "NuGet pack - CI.MSBuild",
      "IgnoreIfBuildFailed": true,
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[var nupCIMdir = $(odir)NuGet-CI.MSBuild-package]",
          "",
          "#[IO delete.directory(\"$(nupCIMdir)\", true)]",
          "#[IO copy.directory(\"\", \"$(nupCIMdir)\", true)]",
          "",
          "#[$(obinNupkg = \"$(nupCIMdir)\\tools\\\\\")]",
          "",
          "#[var nuspec = $(tplNuspec.Replace(\"%CIM%\", \"$(vsixvnum)\").Replace(\"%vsSBE%\", \"$(numSBE)\"))]",
          "#[File write(\"$(nupCIMdir)\\vsSolutionBuildEvent.nuspec\"):#[var nuspec]]",
          "",
          "#[\" files for package \"]",
          "",
          "#[IO copy.file(\"$(CIMLib)\\*.dll\", \"$(obinNupkg)\", true)]#[\" CIMLib custom \"]",
          "",
          "#[var ciml = $(SolutionDir)bin\\prj\\CI.MSBuild\\$(Configuration)\\]",
          "#[var cimgui = $(SolutionDir)bin\\prj\\CI.GUI\\$(Configuration)\\]",
          "",
          "#[\" vsix dir \"]",
          "#[IO copy.file({",
          "                 \"$(vsixLib)*.dll\",",
          "                 \"$(ciml)/*.dll\",",
          "                 \"$(cimgui)/*.exe\",",
          "                 \"$(odir)\\build.SDK$(cfgSDK).txt\",",
          "                 \"3rd-party\",",
          "                 \"changelog.txt\",",
          "                 \"LICENSE\",",
          "                 \"$(vsixLib)*.pkgdef\",",
          "                 \"$(vsixLib)*.config\",",
          "                 \"$(vsixLib)*.vsixmanifest\",",
          "                 \"$(ciml)/*.bat\"",
          "               },",
          "               \"$(obinNupkg)\", true)]",
          "",
          "#[IO copy.file({\"$(vsixLib)\\x64\\\\7z.dll\"}, \"$(obinNupkg)x64\\\\\", true)]",
          "#[IO copy.file({",
          "    \"$(pDir)\\Resources\\\\Package.png\", ",
          "    \"$(pDir)\\Resources\\\\License.md\"",
          "    }, ",
          "    \"$(obinNupkg)Resources\\\\\", true)]",
          "",
          "#[IO copy.file(\"LICENSE\", \"$(nupCIMdir)\\\\License.txt\", true)]",
          "#[IO copy.file({\"README.md\", \"$(ciml)/*.cmd\", \"$(cimgui)/GUI.bat\"}, \"$(nupCIMdir)\", true)]",
          "",
          "",
          "#[\" xml doc \"]",
          "#[( $(cfg) == \"Release\" )",
          "{",
          "    #[IO copy.file({",
          "                     \"$(ciml)/Bridge.xml\",",
          "                     \"$(ciml)/Provider.xml\",",
          "                     \"$(ciml)/CI.MSBuild.xml\",",
          "                     \"$(vsixLib)vsSolutionBuildEvent.xml\"",
          "                   }, ",
          "                   \"$(obinNupkg)\", true)]",
          "}]",
          "",
          "#[NuGet gnt.raw(\"gnt.core /t:pack /p:ngin=\\\"$(nupCIMdir)\\\" /p:ngout=\\\"$(odir)\\\"\")]",
          "#[IO delete.directory(\"$(nupCIMdir)\", true)]",
          "",
          "#[IO copy.file(\"$(odir)\\vsSolutionBuildEvent.$(vsixvnum).nupkg\", \"$(odir)\\vsSolutionBuildEvent.$(vsixvnum)+$(bSha1).SDK$(cfgSDK).nupkg\", true)]",
          "#[IO delete.files({\"$(odir)\\vsSolutionBuildEvent.$(vsixvnum).nupkg\"})]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "PackClientDemo",
      "Caption": "Pack 'ClientDemo'",
      "IgnoreIfBuildFailed": true,
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[var clientDemoDir = bin\\prj\\ClientDemo\\$(Configuration)\\]",
          "#[7z pack.files({",
          "            \"$(clientDemoDir)Bridge.dll\", ",
          "            \"$(clientDemoDir)Bridge.pdb\",",
          "            \"$(clientDemoDir)client.vssbe.dll\",",
          "            \"$(clientDemoDir)client.vssbe.pdb\"}, \"$(odir)ClientDemo.$(bSha1).SDK$(cfgSDK).zip\")]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "GetterCIM",
      "Caption": "Generate getter of CIM package",
      "IgnoreIfBuildFailed": true,
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[$(getcimName = 'get-vsSBE.$(vsixvnum).bat')]",
          "#[IO copy.file(\"$(SolutionDir)\\tools\\gnt.bat\", \"$(odir)\\$(getcimName)\", true)]",
          "",
          "#[File replace(\"$(odir)\\$(getcimName)\", \"/nologo\", \"/nologo /p:ngpackages=\\\"vsSolutionBuildEvent/$(vsixvnum)\\\"\")]"
        ]
      }
    }
  ]
}